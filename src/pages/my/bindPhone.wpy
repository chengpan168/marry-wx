<style lang="less">
  @import "../../assets/css/global";

  page {
    background: #ffffff;
  }

  .page {
    background: #ffffff;
  }


  .form {
    margin-top: 200px;

    button {
      background: rgba(252, 214, 1, 1);
      text-align: center;
    }

    & > view {
      margin: 0 auto 30px auto;
      width: 500px;

      input {
        background: #EEEEEE;
        height: 80px;
        line-height: 80px;
        border-radius: 20px;
        width: 100%;
        padding: 0 20px;
        font-size: 26px;
      }
    }

    .code {
      display: flex;
      align-items: center;
      justify-content: space-between;

      input {
        flex-grow: 1;
      }

      .send-code {
        flex-grow: 0;
        width: 190px;
        height: 80px;
        line-height: 80px;
        margin-left: 10px;
        border-radius: 20px;
        font-size: 26px;
        font-weight: bold;
        color: rgba(255, 255, 255, 1);
        text-align: center;
        outline: none;
        border: none;
      }
    }

    .submit {
      width: 100%;
      margin-top: 70px;
      font-size: 36px;
      font-weight: bold;
      color: rgba(255, 255, 255, 1);
      background:rgba(252,214,1,1);
    }
  }


</style>
<template>
  <view class="page">

    <view class="form">
      <view>
        <input bindinput="onPhoneChange" value="{{ formData.phone }}"
               placeholder="输入手机号" placeholder-class="placeholder"></input>
      </view>
      <view class="code">
        <input bindinput="onCodeChange" value="{{ formData.code }}"
               placeholder="验证码" placeholder-class="placeholder"></input>
        <button class="send-code" @tap="onSendCode">{{sendCodeTimeout > 0 ? sendCodeTimeout + '秒' :
          '验证码'}}
        </button>
      </view>
      <!--<view @tap="onChooseLocation">
        <label>店铺地址</label>
        <input value="{{formData.address}}" placeholder="请选择店铺地址" disabled="true"></input>
      </view>-->

      <view>
        <button class="submit" @tap="onSubmit">确定</button>
      </view>
    </view>


    <!--分隔线-->
    <i-toast id="toast"/>
  </view>
</template>

<script>
  import page from '@/common/page'
  import format from 'date-fns/format'
  import loadMore from '../../components/loadMore'
  import schema from 'async-validator'
  import _get from 'lodash/get'
  import isMobilePhone from 'validator/lib/isMobilePhone'

  const { $Toast } = require('@/components/iview/base/index')

  export default class MyBindPhone extends page {
    config = {
      'navigationBarTitleText': '绑定手机',
      'enablePullDownRefresh': false,
      'navigationBarBackgroundColor': '#FFFFFF',
      'usingComponents': {
        'i-toast': '/components/iview/toast/index',
        'i-modal': '/components/iview/modal/index'
      }
    }
    components = {
      loadMore
    }

    data = {
      token: '',
      loading: false,
      hasNext: true,
      id: '',
      sendCodeTimeout: 0,
      sendCodeTimer: 0,
      formData: {
        phone: '',
        code: '',
      },
      formValidator: {
        phone: [
          { required: true, message: '手机号不能为空', trigger: 'blur' },
          { pattern: /^1[0-9]{10}$/, message: '请填写正确的手机号码', trigger: 'blur' }
        ],
        code: [
          { required: true, message: '请填写验证码', trigger: 'blur' }
        ]
      }

    }

    computed = {}

    onLoad (opt) {
      this.id = opt.id
    }

    onShow () {
      this.init()
    }

    onReachBottom (e) {
      if (!this.data.hasNext || this.data.loading) {
        return
      }
    }

    onShareAppMessage (e) {
      let opt = {
        success (res) {
          console.log('分享成功', res)
        }
      }
      return opt
    }

    init () {
      // this.getDetail()
      // this.getRecord()
    }

    methods = {
      onSendCode () {
        if (!isMobilePhone(this.formData.phone, 'zh-CN')) {
          $Toast({
            content: '手机号格式不正确'
          })
          return
        }
        if (this.sendCodeTimeout > 0) {
          $Toast({
            content: '请求过于频繁, 请稍后发送'
          })
          return
        }

        this.$get('/sys/sendMsgCode', { phone: this.formData.phone, type: 'bindPhone' }).then(res => {
          this.sendCodeTimeout = 60

          this.sendCodeTimer = setInterval(() => {
            if (this.sendCodeTimeout <= 0) {
              clearInterval(this.sendCodeTimer)
            } else {
              this.sendCodeTimeout = this.sendCodeTimeout - 1
              this.$apply()
            }
          }, 1000)

          $Toast({
            content: '验证码发送成功'
          })
        })
      },
      onSubmit () {
        const validator = new schema(this.formValidator)
        validator.validate(this.formData, (errors, fields) => {
          if (errors) {
            $Toast({
              content: errors[0].message
            })
          } else {

            return this.$post('/user/bindPhone', this.formData).then(res => {
              if (res) {
                $Toast({
                  content: '绑定成功'
                })

                wx.navigateBack({
                  delta: 2
                })
              }

            })

          }

        })
      },
      onPhoneChange ({ detail }) {
        this.formData.phone = detail.value
      },
      onCodeChange ({ detail }) {
        this.formData.code = detail.value
      },
    }

    getRecord () {
      wx.showNavigationBarLoading()

      this.$get('/rar/listByDrId', { debitRecordId: this.id }).then(res => {
        let record = res || []
        record.forEach(item => {
          item.createTimeText = format(item.createTime, 'YYYY-MM-DD')
        })
        this.record = record
        wx.hideNavigationBarLoading()
        this.$apply()
      })

    }

  }
</script>
